/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MarketDataFeed.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export namespace com.upstox.marketdatafeeder.rpc.proto {
    export enum Type {
        initial_feed = 0,
        live_feed = 1
    }
    export class LTPC extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ltp?: number;
            ltt?: number;
            ltq?: number;
            cp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ltp" in data && data.ltp != undefined) {
                    this.ltp = data.ltp;
                }
                if ("ltt" in data && data.ltt != undefined) {
                    this.ltt = data.ltt;
                }
                if ("ltq" in data && data.ltq != undefined) {
                    this.ltq = data.ltq;
                }
                if ("cp" in data && data.cp != undefined) {
                    this.cp = data.cp;
                }
            }
        }
        get ltp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ltp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get ltt() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ltt(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ltq() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ltq(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ltp?: number;
            ltt?: number;
            ltq?: number;
            cp?: number;
        }): LTPC {
            const message = new LTPC({});
            if (data.ltp != null) {
                message.ltp = data.ltp;
            }
            if (data.ltt != null) {
                message.ltt = data.ltt;
            }
            if (data.ltq != null) {
                message.ltq = data.ltq;
            }
            if (data.cp != null) {
                message.cp = data.cp;
            }
            return message;
        }
        toObject() {
            const data: {
                ltp?: number;
                ltt?: number;
                ltq?: number;
                cp?: number;
            } = {};
            if (this.ltp != null) {
                data.ltp = this.ltp;
            }
            if (this.ltt != null) {
                data.ltt = this.ltt;
            }
            if (this.ltq != null) {
                data.ltq = this.ltq;
            }
            if (this.cp != null) {
                data.cp = this.cp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ltp != 0)
                writer.writeDouble(1, this.ltp);
            if (this.ltt != 0)
                writer.writeInt64(2, this.ltt);
            if (this.ltq != 0)
                writer.writeInt64(3, this.ltq);
            if (this.cp != 0)
                writer.writeDouble(4, this.cp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LTPC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LTPC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ltp = reader.readDouble();
                        break;
                    case 2:
                        message.ltt = reader.readInt64();
                        break;
                    case 3:
                        message.ltq = reader.readInt64();
                        break;
                    case 4:
                        message.cp = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LTPC {
            return LTPC.deserialize(bytes);
        }
    }
    export class MarketLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bidAskQuote?: Quote[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bidAskQuote" in data && data.bidAskQuote != undefined) {
                    this.bidAskQuote = data.bidAskQuote;
                }
            }
        }
        get bidAskQuote() {
            return pb_1.Message.getRepeatedWrapperField(this, Quote, 1) as Quote[];
        }
        set bidAskQuote(value: Quote[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            bidAskQuote?: ReturnType<typeof Quote.prototype.toObject>[];
        }): MarketLevel {
            const message = new MarketLevel({});
            if (data.bidAskQuote != null) {
                message.bidAskQuote = data.bidAskQuote.map(item => Quote.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                bidAskQuote?: ReturnType<typeof Quote.prototype.toObject>[];
            } = {};
            if (this.bidAskQuote != null) {
                data.bidAskQuote = this.bidAskQuote.map((item: Quote) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bidAskQuote.length)
                writer.writeRepeatedMessage(1, this.bidAskQuote, (item: Quote) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.bidAskQuote, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Quote.deserialize(reader), Quote));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketLevel {
            return MarketLevel.deserialize(bytes);
        }
    }
    export class MarketOHLC extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ohlc?: OHLC[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ohlc" in data && data.ohlc != undefined) {
                    this.ohlc = data.ohlc;
                }
            }
        }
        get ohlc() {
            return pb_1.Message.getRepeatedWrapperField(this, OHLC, 1) as OHLC[];
        }
        set ohlc(value: OHLC[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            ohlc?: ReturnType<typeof OHLC.prototype.toObject>[];
        }): MarketOHLC {
            const message = new MarketOHLC({});
            if (data.ohlc != null) {
                message.ohlc = data.ohlc.map(item => OHLC.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ohlc?: ReturnType<typeof OHLC.prototype.toObject>[];
            } = {};
            if (this.ohlc != null) {
                data.ohlc = this.ohlc.map((item: OHLC) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ohlc.length)
                writer.writeRepeatedMessage(1, this.ohlc, (item: OHLC) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketOHLC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketOHLC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ohlc, () => pb_1.Message.addToRepeatedWrapperField(message, 1, OHLC.deserialize(reader), OHLC));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketOHLC {
            return MarketOHLC.deserialize(bytes);
        }
    }
    export class Quote extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bq?: number;
            bp?: number;
            bno?: number;
            aq?: number;
            ap?: number;
            ano?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bq" in data && data.bq != undefined) {
                    this.bq = data.bq;
                }
                if ("bp" in data && data.bp != undefined) {
                    this.bp = data.bp;
                }
                if ("bno" in data && data.bno != undefined) {
                    this.bno = data.bno;
                }
                if ("aq" in data && data.aq != undefined) {
                    this.aq = data.aq;
                }
                if ("ap" in data && data.ap != undefined) {
                    this.ap = data.ap;
                }
                if ("ano" in data && data.ano != undefined) {
                    this.ano = data.ano;
                }
            }
        }
        get bq() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set bq(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get bno() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set bno(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get aq() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set aq(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ap() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set ap(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ano() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set ano(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            bq?: number;
            bp?: number;
            bno?: number;
            aq?: number;
            ap?: number;
            ano?: number;
        }): Quote {
            const message = new Quote({});
            if (data.bq != null) {
                message.bq = data.bq;
            }
            if (data.bp != null) {
                message.bp = data.bp;
            }
            if (data.bno != null) {
                message.bno = data.bno;
            }
            if (data.aq != null) {
                message.aq = data.aq;
            }
            if (data.ap != null) {
                message.ap = data.ap;
            }
            if (data.ano != null) {
                message.ano = data.ano;
            }
            return message;
        }
        toObject() {
            const data: {
                bq?: number;
                bp?: number;
                bno?: number;
                aq?: number;
                ap?: number;
                ano?: number;
            } = {};
            if (this.bq != null) {
                data.bq = this.bq;
            }
            if (this.bp != null) {
                data.bp = this.bp;
            }
            if (this.bno != null) {
                data.bno = this.bno;
            }
            if (this.aq != null) {
                data.aq = this.aq;
            }
            if (this.ap != null) {
                data.ap = this.ap;
            }
            if (this.ano != null) {
                data.ano = this.ano;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bq != 0)
                writer.writeInt32(1, this.bq);
            if (this.bp != 0)
                writer.writeDouble(2, this.bp);
            if (this.bno != 0)
                writer.writeInt32(3, this.bno);
            if (this.aq != 0)
                writer.writeInt32(4, this.aq);
            if (this.ap != 0)
                writer.writeDouble(5, this.ap);
            if (this.ano != 0)
                writer.writeInt32(6, this.ano);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quote {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quote();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bq = reader.readInt32();
                        break;
                    case 2:
                        message.bp = reader.readDouble();
                        break;
                    case 3:
                        message.bno = reader.readInt32();
                        break;
                    case 4:
                        message.aq = reader.readInt32();
                        break;
                    case 5:
                        message.ap = reader.readDouble();
                        break;
                    case 6:
                        message.ano = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Quote {
            return Quote.deserialize(bytes);
        }
    }
    export class OptionGreeks extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            op?: number;
            up?: number;
            iv?: number;
            delta?: number;
            theta?: number;
            gamma?: number;
            vega?: number;
            rho?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("op" in data && data.op != undefined) {
                    this.op = data.op;
                }
                if ("up" in data && data.up != undefined) {
                    this.up = data.up;
                }
                if ("iv" in data && data.iv != undefined) {
                    this.iv = data.iv;
                }
                if ("delta" in data && data.delta != undefined) {
                    this.delta = data.delta;
                }
                if ("theta" in data && data.theta != undefined) {
                    this.theta = data.theta;
                }
                if ("gamma" in data && data.gamma != undefined) {
                    this.gamma = data.gamma;
                }
                if ("vega" in data && data.vega != undefined) {
                    this.vega = data.vega;
                }
                if ("rho" in data && data.rho != undefined) {
                    this.rho = data.rho;
                }
            }
        }
        get op() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set op(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get up() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set up(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get iv() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set iv(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get delta() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set delta(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get theta() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set theta(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get gamma() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gamma(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get vega() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set vega(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get rho() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set rho(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            op?: number;
            up?: number;
            iv?: number;
            delta?: number;
            theta?: number;
            gamma?: number;
            vega?: number;
            rho?: number;
        }): OptionGreeks {
            const message = new OptionGreeks({});
            if (data.op != null) {
                message.op = data.op;
            }
            if (data.up != null) {
                message.up = data.up;
            }
            if (data.iv != null) {
                message.iv = data.iv;
            }
            if (data.delta != null) {
                message.delta = data.delta;
            }
            if (data.theta != null) {
                message.theta = data.theta;
            }
            if (data.gamma != null) {
                message.gamma = data.gamma;
            }
            if (data.vega != null) {
                message.vega = data.vega;
            }
            if (data.rho != null) {
                message.rho = data.rho;
            }
            return message;
        }
        toObject() {
            const data: {
                op?: number;
                up?: number;
                iv?: number;
                delta?: number;
                theta?: number;
                gamma?: number;
                vega?: number;
                rho?: number;
            } = {};
            if (this.op != null) {
                data.op = this.op;
            }
            if (this.up != null) {
                data.up = this.up;
            }
            if (this.iv != null) {
                data.iv = this.iv;
            }
            if (this.delta != null) {
                data.delta = this.delta;
            }
            if (this.theta != null) {
                data.theta = this.theta;
            }
            if (this.gamma != null) {
                data.gamma = this.gamma;
            }
            if (this.vega != null) {
                data.vega = this.vega;
            }
            if (this.rho != null) {
                data.rho = this.rho;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.op != 0)
                writer.writeDouble(1, this.op);
            if (this.up != 0)
                writer.writeDouble(2, this.up);
            if (this.iv != 0)
                writer.writeDouble(3, this.iv);
            if (this.delta != 0)
                writer.writeDouble(4, this.delta);
            if (this.theta != 0)
                writer.writeDouble(5, this.theta);
            if (this.gamma != 0)
                writer.writeDouble(6, this.gamma);
            if (this.vega != 0)
                writer.writeDouble(7, this.vega);
            if (this.rho != 0)
                writer.writeDouble(8, this.rho);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionGreeks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionGreeks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.op = reader.readDouble();
                        break;
                    case 2:
                        message.up = reader.readDouble();
                        break;
                    case 3:
                        message.iv = reader.readDouble();
                        break;
                    case 4:
                        message.delta = reader.readDouble();
                        break;
                    case 5:
                        message.theta = reader.readDouble();
                        break;
                    case 6:
                        message.gamma = reader.readDouble();
                        break;
                    case 7:
                        message.vega = reader.readDouble();
                        break;
                    case 8:
                        message.rho = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionGreeks {
            return OptionGreeks.deserialize(bytes);
        }
    }
    export class ExtendedFeedDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            atp?: number;
            cp?: number;
            vtt?: number;
            oi?: number;
            changeOi?: number;
            lastClose?: number;
            tbq?: number;
            tsq?: number;
            close?: number;
            lc?: number;
            uc?: number;
            yh?: number;
            yl?: number;
            fp?: number;
            fv?: number;
            mbpBuy?: number;
            mbpSell?: number;
            tv?: number;
            dhoi?: number;
            dloi?: number;
            sp?: number;
            poi?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("atp" in data && data.atp != undefined) {
                    this.atp = data.atp;
                }
                if ("cp" in data && data.cp != undefined) {
                    this.cp = data.cp;
                }
                if ("vtt" in data && data.vtt != undefined) {
                    this.vtt = data.vtt;
                }
                if ("oi" in data && data.oi != undefined) {
                    this.oi = data.oi;
                }
                if ("changeOi" in data && data.changeOi != undefined) {
                    this.changeOi = data.changeOi;
                }
                if ("lastClose" in data && data.lastClose != undefined) {
                    this.lastClose = data.lastClose;
                }
                if ("tbq" in data && data.tbq != undefined) {
                    this.tbq = data.tbq;
                }
                if ("tsq" in data && data.tsq != undefined) {
                    this.tsq = data.tsq;
                }
                if ("close" in data && data.close != undefined) {
                    this.close = data.close;
                }
                if ("lc" in data && data.lc != undefined) {
                    this.lc = data.lc;
                }
                if ("uc" in data && data.uc != undefined) {
                    this.uc = data.uc;
                }
                if ("yh" in data && data.yh != undefined) {
                    this.yh = data.yh;
                }
                if ("yl" in data && data.yl != undefined) {
                    this.yl = data.yl;
                }
                if ("fp" in data && data.fp != undefined) {
                    this.fp = data.fp;
                }
                if ("fv" in data && data.fv != undefined) {
                    this.fv = data.fv;
                }
                if ("mbpBuy" in data && data.mbpBuy != undefined) {
                    this.mbpBuy = data.mbpBuy;
                }
                if ("mbpSell" in data && data.mbpSell != undefined) {
                    this.mbpSell = data.mbpSell;
                }
                if ("tv" in data && data.tv != undefined) {
                    this.tv = data.tv;
                }
                if ("dhoi" in data && data.dhoi != undefined) {
                    this.dhoi = data.dhoi;
                }
                if ("dloi" in data && data.dloi != undefined) {
                    this.dloi = data.dloi;
                }
                if ("sp" in data && data.sp != undefined) {
                    this.sp = data.sp;
                }
                if ("poi" in data && data.poi != undefined) {
                    this.poi = data.poi;
                }
            }
        }
        get atp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set atp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get cp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set cp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get vtt() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set vtt(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get oi() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set oi(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get changeOi() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set changeOi(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lastClose() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lastClose(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get tbq() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set tbq(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get tsq() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set tsq(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get close() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set close(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get lc() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set lc(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get uc() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set uc(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get yh() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set yh(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get yl() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set yl(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get fp() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set fp(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get fv() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set fv(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get mbpBuy() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set mbpBuy(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get mbpSell() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set mbpSell(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get tv() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set tv(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get dhoi() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set dhoi(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get dloi() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set dloi(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get sp() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set sp(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get poi() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set poi(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        static fromObject(data: {
            atp?: number;
            cp?: number;
            vtt?: number;
            oi?: number;
            changeOi?: number;
            lastClose?: number;
            tbq?: number;
            tsq?: number;
            close?: number;
            lc?: number;
            uc?: number;
            yh?: number;
            yl?: number;
            fp?: number;
            fv?: number;
            mbpBuy?: number;
            mbpSell?: number;
            tv?: number;
            dhoi?: number;
            dloi?: number;
            sp?: number;
            poi?: number;
        }): ExtendedFeedDetails {
            const message = new ExtendedFeedDetails({});
            if (data.atp != null) {
                message.atp = data.atp;
            }
            if (data.cp != null) {
                message.cp = data.cp;
            }
            if (data.vtt != null) {
                message.vtt = data.vtt;
            }
            if (data.oi != null) {
                message.oi = data.oi;
            }
            if (data.changeOi != null) {
                message.changeOi = data.changeOi;
            }
            if (data.lastClose != null) {
                message.lastClose = data.lastClose;
            }
            if (data.tbq != null) {
                message.tbq = data.tbq;
            }
            if (data.tsq != null) {
                message.tsq = data.tsq;
            }
            if (data.close != null) {
                message.close = data.close;
            }
            if (data.lc != null) {
                message.lc = data.lc;
            }
            if (data.uc != null) {
                message.uc = data.uc;
            }
            if (data.yh != null) {
                message.yh = data.yh;
            }
            if (data.yl != null) {
                message.yl = data.yl;
            }
            if (data.fp != null) {
                message.fp = data.fp;
            }
            if (data.fv != null) {
                message.fv = data.fv;
            }
            if (data.mbpBuy != null) {
                message.mbpBuy = data.mbpBuy;
            }
            if (data.mbpSell != null) {
                message.mbpSell = data.mbpSell;
            }
            if (data.tv != null) {
                message.tv = data.tv;
            }
            if (data.dhoi != null) {
                message.dhoi = data.dhoi;
            }
            if (data.dloi != null) {
                message.dloi = data.dloi;
            }
            if (data.sp != null) {
                message.sp = data.sp;
            }
            if (data.poi != null) {
                message.poi = data.poi;
            }
            return message;
        }
        toObject() {
            const data: {
                atp?: number;
                cp?: number;
                vtt?: number;
                oi?: number;
                changeOi?: number;
                lastClose?: number;
                tbq?: number;
                tsq?: number;
                close?: number;
                lc?: number;
                uc?: number;
                yh?: number;
                yl?: number;
                fp?: number;
                fv?: number;
                mbpBuy?: number;
                mbpSell?: number;
                tv?: number;
                dhoi?: number;
                dloi?: number;
                sp?: number;
                poi?: number;
            } = {};
            if (this.atp != null) {
                data.atp = this.atp;
            }
            if (this.cp != null) {
                data.cp = this.cp;
            }
            if (this.vtt != null) {
                data.vtt = this.vtt;
            }
            if (this.oi != null) {
                data.oi = this.oi;
            }
            if (this.changeOi != null) {
                data.changeOi = this.changeOi;
            }
            if (this.lastClose != null) {
                data.lastClose = this.lastClose;
            }
            if (this.tbq != null) {
                data.tbq = this.tbq;
            }
            if (this.tsq != null) {
                data.tsq = this.tsq;
            }
            if (this.close != null) {
                data.close = this.close;
            }
            if (this.lc != null) {
                data.lc = this.lc;
            }
            if (this.uc != null) {
                data.uc = this.uc;
            }
            if (this.yh != null) {
                data.yh = this.yh;
            }
            if (this.yl != null) {
                data.yl = this.yl;
            }
            if (this.fp != null) {
                data.fp = this.fp;
            }
            if (this.fv != null) {
                data.fv = this.fv;
            }
            if (this.mbpBuy != null) {
                data.mbpBuy = this.mbpBuy;
            }
            if (this.mbpSell != null) {
                data.mbpSell = this.mbpSell;
            }
            if (this.tv != null) {
                data.tv = this.tv;
            }
            if (this.dhoi != null) {
                data.dhoi = this.dhoi;
            }
            if (this.dloi != null) {
                data.dloi = this.dloi;
            }
            if (this.sp != null) {
                data.sp = this.sp;
            }
            if (this.poi != null) {
                data.poi = this.poi;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.atp != 0)
                writer.writeDouble(1, this.atp);
            if (this.cp != 0)
                writer.writeDouble(2, this.cp);
            if (this.vtt != 0)
                writer.writeInt64(3, this.vtt);
            if (this.oi != 0)
                writer.writeDouble(4, this.oi);
            if (this.changeOi != 0)
                writer.writeDouble(5, this.changeOi);
            if (this.lastClose != 0)
                writer.writeDouble(6, this.lastClose);
            if (this.tbq != 0)
                writer.writeDouble(7, this.tbq);
            if (this.tsq != 0)
                writer.writeDouble(8, this.tsq);
            if (this.close != 0)
                writer.writeDouble(9, this.close);
            if (this.lc != 0)
                writer.writeDouble(10, this.lc);
            if (this.uc != 0)
                writer.writeDouble(11, this.uc);
            if (this.yh != 0)
                writer.writeDouble(12, this.yh);
            if (this.yl != 0)
                writer.writeDouble(13, this.yl);
            if (this.fp != 0)
                writer.writeDouble(14, this.fp);
            if (this.fv != 0)
                writer.writeInt32(15, this.fv);
            if (this.mbpBuy != 0)
                writer.writeInt64(16, this.mbpBuy);
            if (this.mbpSell != 0)
                writer.writeInt64(17, this.mbpSell);
            if (this.tv != 0)
                writer.writeInt64(18, this.tv);
            if (this.dhoi != 0)
                writer.writeDouble(19, this.dhoi);
            if (this.dloi != 0)
                writer.writeDouble(20, this.dloi);
            if (this.sp != 0)
                writer.writeDouble(21, this.sp);
            if (this.poi != 0)
                writer.writeDouble(22, this.poi);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedFeedDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedFeedDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.atp = reader.readDouble();
                        break;
                    case 2:
                        message.cp = reader.readDouble();
                        break;
                    case 3:
                        message.vtt = reader.readInt64();
                        break;
                    case 4:
                        message.oi = reader.readDouble();
                        break;
                    case 5:
                        message.changeOi = reader.readDouble();
                        break;
                    case 6:
                        message.lastClose = reader.readDouble();
                        break;
                    case 7:
                        message.tbq = reader.readDouble();
                        break;
                    case 8:
                        message.tsq = reader.readDouble();
                        break;
                    case 9:
                        message.close = reader.readDouble();
                        break;
                    case 10:
                        message.lc = reader.readDouble();
                        break;
                    case 11:
                        message.uc = reader.readDouble();
                        break;
                    case 12:
                        message.yh = reader.readDouble();
                        break;
                    case 13:
                        message.yl = reader.readDouble();
                        break;
                    case 14:
                        message.fp = reader.readDouble();
                        break;
                    case 15:
                        message.fv = reader.readInt32();
                        break;
                    case 16:
                        message.mbpBuy = reader.readInt64();
                        break;
                    case 17:
                        message.mbpSell = reader.readInt64();
                        break;
                    case 18:
                        message.tv = reader.readInt64();
                        break;
                    case 19:
                        message.dhoi = reader.readDouble();
                        break;
                    case 20:
                        message.dloi = reader.readDouble();
                        break;
                    case 21:
                        message.sp = reader.readDouble();
                        break;
                    case 22:
                        message.poi = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExtendedFeedDetails {
            return ExtendedFeedDetails.deserialize(bytes);
        }
    }
    export class OHLC extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            interval?: string;
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            volume?: number;
            ts?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
                if ("open" in data && data.open != undefined) {
                    this.open = data.open;
                }
                if ("high" in data && data.high != undefined) {
                    this.high = data.high;
                }
                if ("low" in data && data.low != undefined) {
                    this.low = data.low;
                }
                if ("close" in data && data.close != undefined) {
                    this.close = data.close;
                }
                if ("volume" in data && data.volume != undefined) {
                    this.volume = data.volume;
                }
                if ("ts" in data && data.ts != undefined) {
                    this.ts = data.ts;
                }
            }
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set interval(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get open() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set open(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get high() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set high(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get low() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set low(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get close() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set close(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get volume() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set volume(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get ts() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set ts(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            interval?: string;
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            volume?: number;
            ts?: number;
        }): OHLC {
            const message = new OHLC({});
            if (data.interval != null) {
                message.interval = data.interval;
            }
            if (data.open != null) {
                message.open = data.open;
            }
            if (data.high != null) {
                message.high = data.high;
            }
            if (data.low != null) {
                message.low = data.low;
            }
            if (data.close != null) {
                message.close = data.close;
            }
            if (data.volume != null) {
                message.volume = data.volume;
            }
            if (data.ts != null) {
                message.ts = data.ts;
            }
            return message;
        }
        toObject() {
            const data: {
                interval?: string;
                open?: number;
                high?: number;
                low?: number;
                close?: number;
                volume?: number;
                ts?: number;
            } = {};
            if (this.interval != null) {
                data.interval = this.interval;
            }
            if (this.open != null) {
                data.open = this.open;
            }
            if (this.high != null) {
                data.high = this.high;
            }
            if (this.low != null) {
                data.low = this.low;
            }
            if (this.close != null) {
                data.close = this.close;
            }
            if (this.volume != null) {
                data.volume = this.volume;
            }
            if (this.ts != null) {
                data.ts = this.ts;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.interval.length)
                writer.writeString(1, this.interval);
            if (this.open != 0)
                writer.writeDouble(2, this.open);
            if (this.high != 0)
                writer.writeDouble(3, this.high);
            if (this.low != 0)
                writer.writeDouble(4, this.low);
            if (this.close != 0)
                writer.writeDouble(5, this.close);
            if (this.volume != 0)
                writer.writeInt32(6, this.volume);
            if (this.ts != 0)
                writer.writeInt64(7, this.ts);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OHLC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OHLC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.interval = reader.readString();
                        break;
                    case 2:
                        message.open = reader.readDouble();
                        break;
                    case 3:
                        message.high = reader.readDouble();
                        break;
                    case 4:
                        message.low = reader.readDouble();
                        break;
                    case 5:
                        message.close = reader.readDouble();
                        break;
                    case 6:
                        message.volume = reader.readInt32();
                        break;
                    case 7:
                        message.ts = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OHLC {
            return OHLC.deserialize(bytes);
        }
    }
    export class MarketFullFeed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ltpc?: LTPC;
            marketLevel?: MarketLevel;
            optionGreeks?: OptionGreeks;
            marketOHLC?: MarketOHLC;
            eFeedDetails?: ExtendedFeedDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ltpc" in data && data.ltpc != undefined) {
                    this.ltpc = data.ltpc;
                }
                if ("marketLevel" in data && data.marketLevel != undefined) {
                    this.marketLevel = data.marketLevel;
                }
                if ("optionGreeks" in data && data.optionGreeks != undefined) {
                    this.optionGreeks = data.optionGreeks;
                }
                if ("marketOHLC" in data && data.marketOHLC != undefined) {
                    this.marketOHLC = data.marketOHLC;
                }
                if ("eFeedDetails" in data && data.eFeedDetails != undefined) {
                    this.eFeedDetails = data.eFeedDetails;
                }
            }
        }
        get ltpc() {
            return pb_1.Message.getWrapperField(this, LTPC, 1) as LTPC;
        }
        set ltpc(value: LTPC) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ltpc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get marketLevel() {
            return pb_1.Message.getWrapperField(this, MarketLevel, 2) as MarketLevel;
        }
        set marketLevel(value: MarketLevel) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_marketLevel() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get optionGreeks() {
            return pb_1.Message.getWrapperField(this, OptionGreeks, 3) as OptionGreeks;
        }
        set optionGreeks(value: OptionGreeks) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_optionGreeks() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get marketOHLC() {
            return pb_1.Message.getWrapperField(this, MarketOHLC, 4) as MarketOHLC;
        }
        set marketOHLC(value: MarketOHLC) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_marketOHLC() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get eFeedDetails() {
            return pb_1.Message.getWrapperField(this, ExtendedFeedDetails, 5) as ExtendedFeedDetails;
        }
        set eFeedDetails(value: ExtendedFeedDetails) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_eFeedDetails() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
            marketLevel?: ReturnType<typeof MarketLevel.prototype.toObject>;
            optionGreeks?: ReturnType<typeof OptionGreeks.prototype.toObject>;
            marketOHLC?: ReturnType<typeof MarketOHLC.prototype.toObject>;
            eFeedDetails?: ReturnType<typeof ExtendedFeedDetails.prototype.toObject>;
        }): MarketFullFeed {
            const message = new MarketFullFeed({});
            if (data.ltpc != null) {
                message.ltpc = LTPC.fromObject(data.ltpc);
            }
            if (data.marketLevel != null) {
                message.marketLevel = MarketLevel.fromObject(data.marketLevel);
            }
            if (data.optionGreeks != null) {
                message.optionGreeks = OptionGreeks.fromObject(data.optionGreeks);
            }
            if (data.marketOHLC != null) {
                message.marketOHLC = MarketOHLC.fromObject(data.marketOHLC);
            }
            if (data.eFeedDetails != null) {
                message.eFeedDetails = ExtendedFeedDetails.fromObject(data.eFeedDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
                marketLevel?: ReturnType<typeof MarketLevel.prototype.toObject>;
                optionGreeks?: ReturnType<typeof OptionGreeks.prototype.toObject>;
                marketOHLC?: ReturnType<typeof MarketOHLC.prototype.toObject>;
                eFeedDetails?: ReturnType<typeof ExtendedFeedDetails.prototype.toObject>;
            } = {};
            if (this.ltpc != null) {
                data.ltpc = this.ltpc.toObject();
            }
            if (this.marketLevel != null) {
                data.marketLevel = this.marketLevel.toObject();
            }
            if (this.optionGreeks != null) {
                data.optionGreeks = this.optionGreeks.toObject();
            }
            if (this.marketOHLC != null) {
                data.marketOHLC = this.marketOHLC.toObject();
            }
            if (this.eFeedDetails != null) {
                data.eFeedDetails = this.eFeedDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ltpc)
                writer.writeMessage(1, this.ltpc, () => this.ltpc.serialize(writer));
            if (this.has_marketLevel)
                writer.writeMessage(2, this.marketLevel, () => this.marketLevel.serialize(writer));
            if (this.has_optionGreeks)
                writer.writeMessage(3, this.optionGreeks, () => this.optionGreeks.serialize(writer));
            if (this.has_marketOHLC)
                writer.writeMessage(4, this.marketOHLC, () => this.marketOHLC.serialize(writer));
            if (this.has_eFeedDetails)
                writer.writeMessage(5, this.eFeedDetails, () => this.eFeedDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketFullFeed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarketFullFeed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ltpc, () => message.ltpc = LTPC.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.marketLevel, () => message.marketLevel = MarketLevel.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.optionGreeks, () => message.optionGreeks = OptionGreeks.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.marketOHLC, () => message.marketOHLC = MarketOHLC.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.eFeedDetails, () => message.eFeedDetails = ExtendedFeedDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarketFullFeed {
            return MarketFullFeed.deserialize(bytes);
        }
    }
    export class IndexFullFeed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ltpc?: LTPC;
            marketOHLC?: MarketOHLC;
            lastClose?: number;
            yh?: number;
            yl?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ltpc" in data && data.ltpc != undefined) {
                    this.ltpc = data.ltpc;
                }
                if ("marketOHLC" in data && data.marketOHLC != undefined) {
                    this.marketOHLC = data.marketOHLC;
                }
                if ("lastClose" in data && data.lastClose != undefined) {
                    this.lastClose = data.lastClose;
                }
                if ("yh" in data && data.yh != undefined) {
                    this.yh = data.yh;
                }
                if ("yl" in data && data.yl != undefined) {
                    this.yl = data.yl;
                }
            }
        }
        get ltpc() {
            return pb_1.Message.getWrapperField(this, LTPC, 1) as LTPC;
        }
        set ltpc(value: LTPC) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ltpc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get marketOHLC() {
            return pb_1.Message.getWrapperField(this, MarketOHLC, 2) as MarketOHLC;
        }
        set marketOHLC(value: MarketOHLC) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_marketOHLC() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get lastClose() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lastClose(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get yh() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set yh(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yl() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yl(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
            marketOHLC?: ReturnType<typeof MarketOHLC.prototype.toObject>;
            lastClose?: number;
            yh?: number;
            yl?: number;
        }): IndexFullFeed {
            const message = new IndexFullFeed({});
            if (data.ltpc != null) {
                message.ltpc = LTPC.fromObject(data.ltpc);
            }
            if (data.marketOHLC != null) {
                message.marketOHLC = MarketOHLC.fromObject(data.marketOHLC);
            }
            if (data.lastClose != null) {
                message.lastClose = data.lastClose;
            }
            if (data.yh != null) {
                message.yh = data.yh;
            }
            if (data.yl != null) {
                message.yl = data.yl;
            }
            return message;
        }
        toObject() {
            const data: {
                ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
                marketOHLC?: ReturnType<typeof MarketOHLC.prototype.toObject>;
                lastClose?: number;
                yh?: number;
                yl?: number;
            } = {};
            if (this.ltpc != null) {
                data.ltpc = this.ltpc.toObject();
            }
            if (this.marketOHLC != null) {
                data.marketOHLC = this.marketOHLC.toObject();
            }
            if (this.lastClose != null) {
                data.lastClose = this.lastClose;
            }
            if (this.yh != null) {
                data.yh = this.yh;
            }
            if (this.yl != null) {
                data.yl = this.yl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ltpc)
                writer.writeMessage(1, this.ltpc, () => this.ltpc.serialize(writer));
            if (this.has_marketOHLC)
                writer.writeMessage(2, this.marketOHLC, () => this.marketOHLC.serialize(writer));
            if (this.lastClose != 0)
                writer.writeDouble(3, this.lastClose);
            if (this.yh != 0)
                writer.writeDouble(4, this.yh);
            if (this.yl != 0)
                writer.writeDouble(5, this.yl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexFullFeed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexFullFeed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ltpc, () => message.ltpc = LTPC.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.marketOHLC, () => message.marketOHLC = MarketOHLC.deserialize(reader));
                        break;
                    case 3:
                        message.lastClose = reader.readDouble();
                        break;
                    case 4:
                        message.yh = reader.readDouble();
                        break;
                    case 5:
                        message.yl = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexFullFeed {
            return IndexFullFeed.deserialize(bytes);
        }
    }
    export class FullFeed extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            marketFF?: MarketFullFeed;
            indexFF?: never;
        } | {
            marketFF?: never;
            indexFF?: IndexFullFeed;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("marketFF" in data && data.marketFF != undefined) {
                    this.marketFF = data.marketFF;
                }
                if ("indexFF" in data && data.indexFF != undefined) {
                    this.indexFF = data.indexFF;
                }
            }
        }
        get marketFF() {
            return pb_1.Message.getWrapperField(this, MarketFullFeed, 1) as MarketFullFeed;
        }
        set marketFF(value: MarketFullFeed) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_marketFF() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get indexFF() {
            return pb_1.Message.getWrapperField(this, IndexFullFeed, 2) as IndexFullFeed;
        }
        set indexFF(value: IndexFullFeed) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_indexFF() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get FullFeedUnion() {
            const cases: {
                [index: number]: "none" | "marketFF" | "indexFF";
            } = {
                0: "none",
                1: "marketFF",
                2: "indexFF"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            marketFF?: ReturnType<typeof MarketFullFeed.prototype.toObject>;
            indexFF?: ReturnType<typeof IndexFullFeed.prototype.toObject>;
        }): FullFeed {
            const message = new FullFeed({});
            if (data.marketFF != null) {
                message.marketFF = MarketFullFeed.fromObject(data.marketFF);
            }
            if (data.indexFF != null) {
                message.indexFF = IndexFullFeed.fromObject(data.indexFF);
            }
            return message;
        }
        toObject() {
            const data: {
                marketFF?: ReturnType<typeof MarketFullFeed.prototype.toObject>;
                indexFF?: ReturnType<typeof IndexFullFeed.prototype.toObject>;
            } = {};
            if (this.marketFF != null) {
                data.marketFF = this.marketFF.toObject();
            }
            if (this.indexFF != null) {
                data.indexFF = this.indexFF.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_marketFF)
                writer.writeMessage(1, this.marketFF, () => this.marketFF.serialize(writer));
            if (this.has_indexFF)
                writer.writeMessage(2, this.indexFF, () => this.indexFF.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FullFeed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FullFeed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.marketFF, () => message.marketFF = MarketFullFeed.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.indexFF, () => message.indexFF = IndexFullFeed.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FullFeed {
            return FullFeed.deserialize(bytes);
        }
    }
    export class OptionChain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ltpc?: LTPC;
            bidAskQuote?: Quote;
            optionGreeks?: OptionGreeks;
            eFeedDetails?: ExtendedFeedDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ltpc" in data && data.ltpc != undefined) {
                    this.ltpc = data.ltpc;
                }
                if ("bidAskQuote" in data && data.bidAskQuote != undefined) {
                    this.bidAskQuote = data.bidAskQuote;
                }
                if ("optionGreeks" in data && data.optionGreeks != undefined) {
                    this.optionGreeks = data.optionGreeks;
                }
                if ("eFeedDetails" in data && data.eFeedDetails != undefined) {
                    this.eFeedDetails = data.eFeedDetails;
                }
            }
        }
        get ltpc() {
            return pb_1.Message.getWrapperField(this, LTPC, 1) as LTPC;
        }
        set ltpc(value: LTPC) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_ltpc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get bidAskQuote() {
            return pb_1.Message.getWrapperField(this, Quote, 2) as Quote;
        }
        set bidAskQuote(value: Quote) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_bidAskQuote() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get optionGreeks() {
            return pb_1.Message.getWrapperField(this, OptionGreeks, 3) as OptionGreeks;
        }
        set optionGreeks(value: OptionGreeks) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_optionGreeks() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get eFeedDetails() {
            return pb_1.Message.getWrapperField(this, ExtendedFeedDetails, 4) as ExtendedFeedDetails;
        }
        set eFeedDetails(value: ExtendedFeedDetails) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_eFeedDetails() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
            bidAskQuote?: ReturnType<typeof Quote.prototype.toObject>;
            optionGreeks?: ReturnType<typeof OptionGreeks.prototype.toObject>;
            eFeedDetails?: ReturnType<typeof ExtendedFeedDetails.prototype.toObject>;
        }): OptionChain {
            const message = new OptionChain({});
            if (data.ltpc != null) {
                message.ltpc = LTPC.fromObject(data.ltpc);
            }
            if (data.bidAskQuote != null) {
                message.bidAskQuote = Quote.fromObject(data.bidAskQuote);
            }
            if (data.optionGreeks != null) {
                message.optionGreeks = OptionGreeks.fromObject(data.optionGreeks);
            }
            if (data.eFeedDetails != null) {
                message.eFeedDetails = ExtendedFeedDetails.fromObject(data.eFeedDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
                bidAskQuote?: ReturnType<typeof Quote.prototype.toObject>;
                optionGreeks?: ReturnType<typeof OptionGreeks.prototype.toObject>;
                eFeedDetails?: ReturnType<typeof ExtendedFeedDetails.prototype.toObject>;
            } = {};
            if (this.ltpc != null) {
                data.ltpc = this.ltpc.toObject();
            }
            if (this.bidAskQuote != null) {
                data.bidAskQuote = this.bidAskQuote.toObject();
            }
            if (this.optionGreeks != null) {
                data.optionGreeks = this.optionGreeks.toObject();
            }
            if (this.eFeedDetails != null) {
                data.eFeedDetails = this.eFeedDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ltpc)
                writer.writeMessage(1, this.ltpc, () => this.ltpc.serialize(writer));
            if (this.has_bidAskQuote)
                writer.writeMessage(2, this.bidAskQuote, () => this.bidAskQuote.serialize(writer));
            if (this.has_optionGreeks)
                writer.writeMessage(3, this.optionGreeks, () => this.optionGreeks.serialize(writer));
            if (this.has_eFeedDetails)
                writer.writeMessage(4, this.eFeedDetails, () => this.eFeedDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionChain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionChain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ltpc, () => message.ltpc = LTPC.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.bidAskQuote, () => message.bidAskQuote = Quote.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.optionGreeks, () => message.optionGreeks = OptionGreeks.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.eFeedDetails, () => message.eFeedDetails = ExtendedFeedDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionChain {
            return OptionChain.deserialize(bytes);
        }
    }
    export class Feed extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            ltpc?: LTPC;
            ff?: never;
            oc?: never;
        } | {
            ltpc?: never;
            ff?: FullFeed;
            oc?: never;
        } | {
            ltpc?: never;
            ff?: never;
            oc?: OptionChain;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ltpc" in data && data.ltpc != undefined) {
                    this.ltpc = data.ltpc;
                }
                if ("ff" in data && data.ff != undefined) {
                    this.ff = data.ff;
                }
                if ("oc" in data && data.oc != undefined) {
                    this.oc = data.oc;
                }
            }
        }
        get ltpc() {
            return pb_1.Message.getWrapperField(this, LTPC, 1) as LTPC;
        }
        set ltpc(value: LTPC) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ltpc() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ff() {
            return pb_1.Message.getWrapperField(this, FullFeed, 2) as FullFeed;
        }
        set ff(value: FullFeed) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ff() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get oc() {
            return pb_1.Message.getWrapperField(this, OptionChain, 3) as OptionChain;
        }
        set oc(value: OptionChain) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_oc() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get FeedUnion() {
            const cases: {
                [index: number]: "none" | "ltpc" | "ff" | "oc";
            } = {
                0: "none",
                1: "ltpc",
                2: "ff",
                3: "oc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
            ff?: ReturnType<typeof FullFeed.prototype.toObject>;
            oc?: ReturnType<typeof OptionChain.prototype.toObject>;
        }): Feed {
            const message = new Feed({});
            if (data.ltpc != null) {
                message.ltpc = LTPC.fromObject(data.ltpc);
            }
            if (data.ff != null) {
                message.ff = FullFeed.fromObject(data.ff);
            }
            if (data.oc != null) {
                message.oc = OptionChain.fromObject(data.oc);
            }
            return message;
        }
        toObject() {
            const data: {
                ltpc?: ReturnType<typeof LTPC.prototype.toObject>;
                ff?: ReturnType<typeof FullFeed.prototype.toObject>;
                oc?: ReturnType<typeof OptionChain.prototype.toObject>;
            } = {};
            if (this.ltpc != null) {
                data.ltpc = this.ltpc.toObject();
            }
            if (this.ff != null) {
                data.ff = this.ff.toObject();
            }
            if (this.oc != null) {
                data.oc = this.oc.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ltpc)
                writer.writeMessage(1, this.ltpc, () => this.ltpc.serialize(writer));
            if (this.has_ff)
                writer.writeMessage(2, this.ff, () => this.ff.serialize(writer));
            if (this.has_oc)
                writer.writeMessage(3, this.oc, () => this.oc.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Feed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Feed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ltpc, () => message.ltpc = LTPC.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.ff, () => message.ff = FullFeed.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.oc, () => message.oc = OptionChain.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Feed {
            return Feed.deserialize(bytes);
        }
    }
    export class FeedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: Type;
            feeds?: Map<string, Feed>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("feeds" in data && data.feeds != undefined) {
                    this.feeds = data.feeds;
                }
            }
            if (!this.feeds)
                this.feeds = new Map();
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, Type.initial_feed) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get feeds() {
            return pb_1.Message.getField(this, 2) as any as Map<string, Feed>;
        }
        set feeds(value: Map<string, Feed>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            type?: Type;
            feeds?: {
                [key: string]: ReturnType<typeof Feed.prototype.toObject>;
            };
        }): FeedResponse {
            const message = new FeedResponse({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (typeof data.feeds == "object") {
                message.feeds = new Map(Object.entries(data.feeds).map(([key, value]) => [key, Feed.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Type;
                feeds?: {
                    [key: string]: ReturnType<typeof Feed.prototype.toObject>;
                };
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.feeds != null) {
                data.feeds = (Object.fromEntries)((Array.from)(this.feeds).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != Type.initial_feed)
                writer.writeEnum(1, this.type);
            for (const [key, value] of this.feeds) {
                writer.writeMessage(2, this.feeds, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.feeds as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Feed.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeedResponse {
            return FeedResponse.deserialize(bytes);
        }
    }
}
